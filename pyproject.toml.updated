[build-system]
requires = ["setuptools>=61.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "secure-mpc-transformer"
version = "0.2.0"
description = "GPU-accelerated secure multi-party computation for transformer inference with quantum-inspired task planning"
readme = "README.md"
license = {text = "MIT"}
authors = [
    {name = "Daniel Schmidt", email = "author@example.com"},
]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Science/Research",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Topic :: Security :: Cryptography",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
    "Topic :: System :: Distributed Computing",
]
requires-python = ">=3.10"
dependencies = [
    "torch>=2.3.0",
    "transformers>=4.40.0",
    "numpy>=1.24.0",
    "cryptography>=41.0.0",
    "scipy>=1.10.0",
    "psutil>=5.9.0",
    "asyncio-mqtt>=0.16.0",
]

[project.optional-dependencies]
gpu = [
    "cupy-cuda12x>=12.0.0",
    "nvidia-ml-py>=12.0.0",
]
dev = [
    "pytest>=7.4.0",
    "pytest-cov>=4.1.0",
    "pytest-asyncio>=0.21.0",
    "pytest-mock>=3.11.0",
    "black>=23.7.0",
    "ruff>=0.0.287",
    "mypy>=1.5.0",
    "pre-commit>=3.3.0",
]
benchmark = [
    "matplotlib>=3.7.0",
    "pandas>=2.0.0",
    "seaborn>=0.12.0",
    "memory-profiler>=0.61.0",
    "line-profiler>=4.0.0",
]
quantum-planning = [
    "scipy>=1.10.0",
    "scikit-learn>=1.3.0",
    "networkx>=3.1.0",
    "asyncio>=3.4.3",
    "aiohttp>=3.8.0",
    "prometheus-client>=0.17.0",
]
monitoring = [
    "prometheus-client>=0.17.0",
    "grafana-api>=1.0.3",
    "opentelemetry-api>=1.18.0",
    "opentelemetry-sdk>=1.18.0",
    "opentelemetry-exporter-prometheus>=1.12.0",
]
security = [
    "cryptography>=41.0.0",
    "pycryptodome>=3.18.0",
    "bcrypt>=4.0.0",
    "pyjwt>=2.8.0",
]

[project.urls]
Homepage = "https://github.com/danieleschmidt/secure-mpc-transformer-infer"
Documentation = "https://secure-mpc-transformer.readthedocs.io"
Repository = "https://github.com/danieleschmidt/secure-mpc-transformer-infer.git"
Issues = "https://github.com/danieleschmidt/secure-mpc-transformer-infer/issues"
Changelog = "https://github.com/danieleschmidt/secure-mpc-transformer-infer/blob/main/CHANGELOG.md"

[project.scripts]
secure-mpc = "secure_mpc_transformer.cli:main"
quantum-planner = "secure_mpc_transformer.planning.cli:main"

[project.entry-points."secure_mpc_transformer.planning_backends"]
quantum = "secure_mpc_transformer.planning:QuantumTaskPlanner"
concurrent = "secure_mpc_transformer.planning:ConcurrentQuantumExecutor"

[tool.setuptools.packages.find]
where = ["src"]

[tool.setuptools.package-data]
secure_mpc_transformer = [
    "config/*.yaml",
    "config/*.json",
    "templates/*.html",
    "static/*",
]

[tool.black]
line-length = 88
target-version = ['py310']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

[tool.ruff]
line-length = 88
target-version = "py310"
select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "F",  # pyflakes
    "I",  # isort
    "B",  # flake8-bugbear
    "C4", # flake8-comprehensions
    "UP", # pyupgrade
    "SIM", # flake8-simplify
]
ignore = [
    "E501",  # line too long, handled by black
    "B008",  # do not perform function calls in argument defaults
    "C901",  # too complex
]

[tool.ruff.per-file-ignores]
"__init__.py" = ["F401"]
"tests/*" = ["S101"]

[tool.mypy]
python_version = "3.10"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true

[[tool.mypy.overrides]]
module = [
    "torch.*",
    "transformers.*",
    "cupy.*",
    "scipy.*",
    "sklearn.*",
    "matplotlib.*",
    "seaborn.*",
    "pandas.*",
]
ignore_missing_imports = true

[tool.pytest.ini_options]
testpaths = ["tests"]
addopts = [
    "--cov=secure_mpc_transformer",
    "--cov-report=html",
    "--cov-report=term-missing",
    "--cov-report=xml",
    "--strict-markers",
    "--disable-warnings",
]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "security: marks tests as security tests",
    "gpu: marks tests that require GPU",
    "quantum: marks tests for quantum planning features",
]

[tool.coverage.run]
source = ["src"]
omit = [
    "*/tests/*",
    "*/test_*.py",
    "setup.py",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]

[tool.coverage.html]
directory = "htmlcov"

[tool.bandit]
exclude_dirs = ["tests"]
skips = ["B101", "B601"]

[tool.bandit.assert_used]
skips = ["*_test.py", "*/test_*.py"]