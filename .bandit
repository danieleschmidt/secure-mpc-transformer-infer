# Bandit configuration for Secure MPC Transformer
# Security-focused Python linting with MPC-specific considerations

[bandit]
# Exclude directories that don't contain production code
exclude_dirs = [
    "tests",
    "benchmarks", 
    "examples",
    "build",
    "dist",
    ".venv",
    "venv"
]

# Specific tests to run
tests = [
    "B101",  # assert_used
    "B102",  # exec_used  
    "B103",  # set_bad_file_permissions
    "B104",  # hardcoded_bind_all_interfaces
    "B105",  # hardcoded_password_string
    "B106",  # hardcoded_password_funcarg
    "B107",  # hardcoded_password_default
    "B108",  # hardcoded_tmp_directory
    "B110",  # try_except_pass
    "B112",  # try_except_continue
    "B201",  # flask_debug_true
    "B301",  # pickle
    "B302",  # marshal
    "B303",  # md5
    "B304",  # des
    "B305",  # sha1
    "B306",  # mktemp_q
    "B307",  # eval
    "B308",  # mark_safe
    "B309",  # httpsconnection
    "B310",  # urllib_urlopen
    "B311",  # random
    "B312",  # telnetlib
    "B313",  # xml_bad_cElementTree
    "B314",  # xml_bad_ElementTree
    "B315",  # xml_bad_expatreader
    "B316",  # xml_bad_expatbuilder
    "B317",  # xml_bad_sax
    "B318",  # xml_bad_minidom
    "B319",  # xml_bad_pulldom
    "B320",  # xml_bad_etree
    "B321",  # ftplib
    "B322",  # input
    "B323",  # unverified_context
    "B324",  # hashlib_new_insecure_functions
    "B325",  # tempnam
    "B401",  # import_telnetlib
    "B402",  # import_ftplib
    "B403",  # import_pickle
    "B404",  # import_subprocess
    "B405",  # import_xml_etree
    "B406",  # import_xml_sax
    "B407",  # import_xml_expat
    "B408",  # import_xml_minidom
    "B409",  # import_xml_pulldom
    "B410",  # import_lxml
    "B411",  # import_xmlrpclib
    "B412",  # import_httpoxy
    "B413",  # import_pycrypto
    "B501",  # request_with_no_cert_validation
    "B502",  # ssl_with_bad_version
    "B503",  # ssl_with_bad_defaults
    "B504",  # ssl_with_no_version
    "B505",  # weak_cryptographic_key
    "B506",  # yaml_load
    "B507",  # ssh_no_host_key_verification
    "B601",  # paramiko_calls
    "B602",  # subprocess_popen_with_shell_equals_true
    "B603",  # subprocess_without_shell_equals_true
    "B604",  # any_other_function_with_shell_equals_true
    "B605",  # start_process_with_a_shell
    "B606",  # start_process_with_no_shell
    "B607",  # start_process_with_partial_path
    "B608",  # hardcoded_sql_expressions
    "B609",  # linux_commands_wildcard_injection
    "B610",  # django_extra_used
    "B611",  # django_rawsql_used
    "B701",  # jinja2_autoescape_false
    "B702",  # use_of_mako_templates
    "B703"   # django_mark_safe
]

# Skip certain tests with justification
skips = [
    # Allow asserts in protocol implementations for correctness checks
    # MPC protocols require correctness assertions for security guarantees
    "B101:tests/",  # Allow asserts in test files only
    
    # Allow subprocess in specific secure contexts
    "B602:src/secure_mpc_transformer/gpu/cuda_launcher.py",  # CUDA kernel compilation
    
    # Allow pickle for tensor serialization (controlled environment)
    "B301:src/secure_mpc_transformer/models/serialization.py"  # Model serialization
]

# Confidence levels: LOW, MEDIUM, HIGH
confidence = "MEDIUM"

# Severity levels: LOW, MEDIUM, HIGH
severity = "LOW"

# Additional bandit configuration
[bandit.blacklist_calls]
# Allow specific calls in cryptographic contexts
bad_name_sets = [
    "pickle",      # Controlled use for tensor serialization
    "marshal",     # Not used in our codebase
    "random",      # Use secrets.SystemRandom for crypto
    "md5",         # Not for cryptographic purposes
    "sha1"         # Not for cryptographic purposes
]

[bandit.blacklist_imports]
# Control imports that might be security risks
bad_import_sets = [
    "telnetlib",   # Not needed for MPC
    "ftplib",      # Not needed for MPC  
    "pickle",      # Allow with warning
    "xml.etree",   # Allow with careful usage
    "subprocess"   # Allow for CUDA compilation
]

# Custom wordlist for password detection
# This helps identify hardcoded secrets specific to MPC
[bandit.hardcoded_password_string]
word_list = [
    "password",
    "passwd", 
    "pwd",
    "secret",
    "key",
    "token",
    "auth",
    "api_key",
    "private_key",
    "secret_key",
    "mpc_key",
    "share_key",
    "crypto_key",
    "signing_key"
]