apiVersion: v1
kind: Namespace
metadata:
  name: quantum-mpc-production
  labels:
    app: quantum-mpc-transformer
    tier: production
    version: v0.3.0
    security.terragon.io/enhanced: "true"

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: quantum-mpc-production-deployment
  namespace: quantum-mpc-production
  labels:
    app: quantum-mpc-transformer
    component: production-inference
    version: v0.3.0
    security.terragon.io/tier: "production"
  annotations:
    deployment.kubernetes.io/revision: "1"
    terragon.io/deployment-strategy: "blue-green"
spec:
  replicas: 5
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxUnavailable: 1
      maxSurge: 2
  selector:
    matchLabels:
      app: quantum-mpc-transformer
      component: production-inference
  template:
    metadata:
      labels:
        app: quantum-mpc-transformer
        component: production-inference
        version: v0.3.0
        security.terragon.io/pod-security: "restricted"
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "9090"
        prometheus.io/path: "/metrics"
        terragon.io/quantum-optimization: "enabled"
        terragon.io/security-level: "production"
    spec:
      securityContext:
        runAsNonRoot: true
        runAsUser: 1001
        runAsGroup: 3000
        fsGroup: 2000
        seccompProfile:
          type: RuntimeDefault
      
      serviceAccountName: quantum-mpc-production-sa
      
      initContainers:
      - name: security-validator
        image: secure-mpc-transformer:v0.3.0-security
        command: ['sh', '-c']
        args:
        - |
          echo "Running production security validation..."
          python3 /app/scripts/run_security_validation.py --level production
          echo "Security validation completed"
        
        resources:
          requests:
            memory: "256Mi"
            cpu: "200m"
          limits:
            memory: "512Mi"
            cpu: "500m"
        
        securityContext:
          allowPrivilegeEscalation: false
          readOnlyRootFilesystem: true
          runAsNonRoot: true
          runAsUser: 1001
          capabilities:
            drop:
            - ALL
      
      - name: quantum-state-initializer
        image: secure-mpc-transformer:v0.3.0-quantum
        command: ['python3']
        args: ['-c', 'import sys; sys.path.insert(0, "/app/src"); from secure_mpc_transformer.planning.quantum_planner import QuantumTaskPlanner; print("Quantum systems initialized")']
        
        resources:
          requests:
            memory: "512Mi"
            cpu: "300m"
          limits:
            memory: "1Gi"
            cpu: "600m"
        
        securityContext:
          allowPrivilegeEscalation: false
          readOnlyRootFilesystem: true
          runAsNonRoot: true
          runAsUser: 1001
          capabilities:
            drop:
            - ALL
      
      containers:
      - name: quantum-mpc-inference
        image: secure-mpc-transformer:v0.3.0-production
        imagePullPolicy: IfNotPresent
        
        ports:
        - containerPort: 8080
          name: api
          protocol: TCP
        - containerPort: 9090
          name: metrics
          protocol: TCP
        - containerPort: 8443
          name: secure-api
          protocol: TCP
        
        env:
        - name: ENVIRONMENT
          value: "production"
        - name: QUANTUM_OPTIMIZATION
          value: "true"
        - name: SECURITY_LEVEL
          value: "256"
        - name: POST_QUANTUM_ENABLED
          value: "true"
        - name: MALICIOUS_SECURITY
          value: "true"
        - name: LOG_LEVEL
          value: "WARNING"
        - name: PYTHONPATH
          value: "/app/src"
        - name: TERRAGON_DEPLOYMENT_MODE
          value: "autonomous"
        
        # Security environment variables
        - name: ENCRYPTION_KEY_PATH
          value: "/etc/encryption/key"
        - name: TLS_CERT_PATH
          value: "/etc/tls/tls.crt"
        - name: TLS_KEY_PATH
          value: "/etc/tls/tls.key"
        
        resources:
          requests:
            memory: "8Gi"
            cpu: "4000m"
            ephemeral-storage: "2Gi"
            nvidia.com/gpu: 1
          limits:
            memory: "32Gi"
            cpu: "16000m"
            ephemeral-storage: "10Gi"
            nvidia.com/gpu: 2
        
        livenessProbe:
          httpGet:
            path: /health
            port: 8080
            scheme: HTTP
          initialDelaySeconds: 60
          periodSeconds: 30
          timeoutSeconds: 15
          failureThreshold: 3
          successThreshold: 1
        
        readinessProbe:
          httpGet:
            path: /ready
            port: 8080
            scheme: HTTP
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 10
          successThreshold: 1
          failureThreshold: 5
        
        startupProbe:
          httpGet:
            path: /startup
            port: 8080
            scheme: HTTP
          initialDelaySeconds: 10
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 30
          successThreshold: 1
        
        volumeMounts:
        - name: quantum-cache
          mountPath: /app/quantum_cache
        - name: model-cache
          mountPath: /app/model_cache
        - name: config-volume
          mountPath: /app/config
          readOnly: true
        - name: tls-certs
          mountPath: /etc/tls
          readOnly: true
        - name: encryption-keys
          mountPath: /etc/encryption
          readOnly: true
        - name: tmp-storage
          mountPath: /tmp
        
        securityContext:
          allowPrivilegeEscalation: false
          readOnlyRootFilesystem: true
          runAsNonRoot: true
          runAsUser: 1001
          runAsGroup: 3000
          capabilities:
            drop:
            - ALL
      
      - name: security-monitor
        image: secure-mpc-transformer:v0.3.0-security
        ports:
        - containerPort: 9091
          name: sec-metrics
        
        env:
        - name: MONITOR_MODE
          value: "production"
        - name: THREAT_DETECTION
          value: "enabled"
        - name: QUANTUM_SECURITY_MONITORING
          value: "enabled"
        
        resources:
          requests:
            memory: "512Mi"
            cpu: "300m"
          limits:
            memory: "1Gi"
            cpu: "600m"
        
        volumeMounts:
        - name: security-logs
          mountPath: /var/log/security
        
        securityContext:
          allowPrivilegeEscalation: false
          readOnlyRootFilesystem: true
          runAsNonRoot: true
          runAsUser: 1002
          capabilities:
            drop:
            - ALL
      
      - name: metrics-collector
        image: prom/prometheus:latest
        ports:
        - containerPort: 9092
          name: prom-metrics
        
        resources:
          requests:
            memory: "256Mi"
            cpu: "200m"
          limits:
            memory: "512Mi"
            cpu: "400m"
        
        volumeMounts:
        - name: prometheus-config
          mountPath: /etc/prometheus
          readOnly: true
        - name: prometheus-data
          mountPath: /prometheus
        
        securityContext:
          allowPrivilegeEscalation: false
          readOnlyRootFilesystem: true
          runAsNonRoot: true
          runAsUser: 65534
          capabilities:
            drop:
            - ALL
      
      volumes:
      - name: quantum-cache
        persistentVolumeClaim:
          claimName: quantum-cache-pvc
      
      - name: model-cache
        persistentVolumeClaim:
          claimName: model-cache-pvc
      
      - name: config-volume
        configMap:
          name: quantum-mpc-production-config
          defaultMode: 0440
      
      - name: tls-certs
        secret:
          secretName: quantum-mpc-tls-secret
          defaultMode: 0400
      
      - name: encryption-keys
        secret:
          secretName: quantum-mpc-encryption-secret
          defaultMode: 0400
      
      - name: security-logs
        emptyDir:
          sizeLimit: 1Gi
      
      - name: prometheus-config
        configMap:
          name: prometheus-production-config
      
      - name: prometheus-data
        emptyDir:
          sizeLimit: 5Gi
      
      - name: tmp-storage
        emptyDir:
          sizeLimit: 2Gi
      
      # GPU node selector for quantum optimization
      nodeSelector:
        nvidia.com/gpu.present: "true"
        node-type: production-compute
        terragon.io/quantum-capable: "true"
      
      tolerations:
      - key: "production-workload"
        operator: "Equal"
        value: "true"
        effect: "NoSchedule"
      - key: "nvidia.com/gpu"
        operator: "Exists"
        effect: "NoSchedule"
      
      affinity:
        nodeAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            nodeSelectorTerms:
            - matchExpressions:
              - key: kubernetes.io/arch
                operator: In
                values: ["amd64"]
              - key: node.kubernetes.io/instance-type
                operator: In
                values: ["p3.2xlarge", "p3.8xlarge", "p4d.xlarge"]
        
        podAntiAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
          - labelSelector:
              matchExpressions:
              - key: app
                operator: In
                values: ["quantum-mpc-transformer"]
              - key: component
                operator: In
                values: ["production-inference"]
            topologyKey: kubernetes.io/hostname

---
apiVersion: v1
kind: Service
metadata:
  name: quantum-mpc-production-service
  namespace: quantum-mpc-production
  labels:
    app: quantum-mpc-transformer
    component: production-inference
  annotations:
    service.beta.kubernetes.io/aws-load-balancer-type: nlb
    service.beta.kubernetes.io/aws-load-balancer-backend-protocol: tcp
    service.beta.kubernetes.io/aws-load-balancer-ssl-cert: arn:aws:acm:us-west-2:123456789012:certificate/12345678-1234-1234-1234-123456789012
    service.beta.kubernetes.io/aws-load-balancer-ssl-ports: "https"
    terragon.io/service-tier: "production"
spec:
  type: LoadBalancer
  selector:
    app: quantum-mpc-transformer
    component: production-inference
  ports:
  - name: api
    port: 80
    targetPort: 8080
    protocol: TCP
  - name: secure-api
    port: 443
    targetPort: 8443
    protocol: TCP
  - name: metrics
    port: 9090
    targetPort: 9090
    protocol: TCP
  sessionAffinity: ClientIP
  sessionAffinityConfig:
    clientIP:
      timeoutSeconds: 3600

---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: quantum-mpc-production-sa
  namespace: quantum-mpc-production
  labels:
    app: quantum-mpc-transformer
    security.terragon.io/service-account: "production"
  annotations:
    eks.amazonaws.com/role-arn: arn:aws:iam::123456789012:role/quantum-mpc-production-role

---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: quantum-mpc-production-role
  labels:
    security.terragon.io/rbac: "production"
rules:
- apiGroups: [""]
  resources: ["pods", "services", "endpoints", "configmaps"]
  verbs: ["get", "list", "watch"]
- apiGroups: ["apps"]
  resources: ["deployments", "replicasets"]
  verbs: ["get", "list", "watch"]
- apiGroups: ["metrics.k8s.io"]
  resources: ["pods", "nodes"]
  verbs: ["get", "list"]
- apiGroups: ["networking.k8s.io"]
  resources: ["networkpolicies"]
  verbs: ["get", "list"]

---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: quantum-mpc-production-binding
  labels:
    security.terragon.io/rbac: "production"
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: quantum-mpc-production-role
subjects:
- kind: ServiceAccount
  name: quantum-mpc-production-sa
  namespace: quantum-mpc-production

---
apiVersion: v1
kind: ConfigMap
metadata:
  name: quantum-mpc-production-config
  namespace: quantum-mpc-production
  labels:
    app: quantum-mpc-transformer
    config-tier: production
data:
  production-config.yaml: |
    production:
      security:
        level: 256
        post_quantum: true
        malicious_secure: true
        quantum_resistant: true
        tls_version: "1.3"
        cipher_suites:
          - "TLS_AES_256_GCM_SHA384"
          - "TLS_CHACHA20_POLY1305_SHA256"
        
      quantum:
        optimization:
          enabled: true
          method: "adaptive_quantum"
          depth: 8
          entanglement_layers: 4
          auto_scaling: true
          performance_target: "low_latency"
        
        planning:
          scheduler: "quantum_aware"
          load_balancing: true
          resource_optimization: true
          cache_warming: true
        
      performance:
        gpu_acceleration: true
        tensor_fusion: true
        memory_optimization: true
        batch_processing: true
        async_inference: true
        max_batch_size: 32
        timeout_seconds: 30
        
      monitoring:
        metrics_enabled: true
        tracing_enabled: true
        logging_level: "WARNING"
        security_monitoring: true
        performance_monitoring: true
        quantum_state_tracking: true
        
      resilience:
        circuit_breaker: true
        retry_policy:
          max_attempts: 3
          backoff_strategy: "exponential"
        
        health_checks:
          startup_timeout: 300
          liveness_interval: 30
          readiness_interval: 10
        
        auto_scaling:
          enabled: true
          min_replicas: 3
          max_replicas: 20
          cpu_threshold: 70
          memory_threshold: 80
          quantum_performance_threshold: 0.8
  
  quantum-production-config.yaml: |
    quantum_production:
      algorithms:
        primary: "adaptive_quantum"
        fallback: "hybrid_quantum_classical"
        emergency_fallback: "classical_baseline"
        
      optimization:
        variational_steps: 200
        convergence_threshold: 1e-7
        learning_rate: 0.005
        adaptive_learning: true
        
      security:
        quantum_key_distribution: true
        post_quantum_protocols:
          - "lattice_based"
          - "code_based"
          - "isogeny_based"
        
        threat_detection:
          timing_attacks: true
          side_channel_attacks: true
          quantum_attacks: true
          
      caching:
        quantum_state_cache:
          enabled: true
          max_size: 10000
          ttl_seconds: 3600
          compression: true
          
        optimization_cache:
          enabled: true
          max_size: 5000
          ttl_seconds: 1800
          
      scaling:
        auto_scaling_enabled: true
        scale_up_threshold: 0.8
        scale_down_threshold: 0.3
        quantum_coherence_threshold: 0.9

---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: quantum-cache-pvc
  namespace: quantum-mpc-production
  labels:
    app: quantum-mpc-transformer
    storage-tier: production
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 200Gi
  storageClassName: premium-ssd

---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: model-cache-pvc
  namespace: quantum-mpc-production
  labels:
    app: quantum-mpc-transformer
    storage-tier: production
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 500Gi
  storageClassName: premium-ssd

---
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: quantum-mpc-production-hpa
  namespace: quantum-mpc-production
  labels:
    app: quantum-mpc-transformer
    component: autoscaling
    tier: production
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: quantum-mpc-production-deployment
  
  minReplicas: 3
  maxReplicas: 20
  
  metrics:
  - type: Resource
    resource:
      name: cpu
      target:
        type: Utilization
        averageUtilization: 70
  
  - type: Resource
    resource:
      name: memory
      target:
        type: Utilization
        averageUtilization: 80
  
  - type: Resource
    resource:
      name: nvidia.com/gpu
      target:
        type: Utilization
        averageUtilization: 75
  
  # Custom metrics for quantum performance
  - type: Pods
    pods:
      metric:
        name: quantum_coherence_score
      target:
        type: AverageValue
        averageValue: "0.8"
  
  - type: Pods
    pods:
      metric:
        name: quantum_optimization_efficiency
      target:
        type: AverageValue
        averageValue: "0.85"
  
  behavior:
    scaleUp:
      stabilizationWindowSeconds: 300
      policies:
      - type: Percent
        value: 50
        periodSeconds: 60
      - type: Pods
        value: 2
        periodSeconds: 60
      selectPolicy: Max
    
    scaleDown:
      stabilizationWindowSeconds: 600
      policies:
      - type: Percent
        value: 10
        periodSeconds: 60
      - type: Pods
        value: 1
        periodSeconds: 300
      selectPolicy: Min

---
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: quantum-mpc-production-network-policy
  namespace: quantum-mpc-production
  labels:
    security.terragon.io/network-policy: "production"
spec:
  podSelector:
    matchLabels:
      app: quantum-mpc-transformer
      component: production-inference
  
  policyTypes:
  - Ingress
  - Egress
  
  ingress:
  # Allow ingress from load balancer
  - from:
    - namespaceSelector:
        matchLabels:
          name: ingress-nginx
    ports:
    - protocol: TCP
      port: 8080
    - protocol: TCP
      port: 8443
  
  # Allow monitoring access
  - from:
    - namespaceSelector:
        matchLabels:
          name: monitoring
    ports:
    - protocol: TCP
      port: 9090
    - protocol: TCP
      port: 9091
    - protocol: TCP
      port: 9092
  
  egress:
  # Allow DNS
  - to: []
    ports:
    - protocol: TCP
      port: 53
    - protocol: UDP
      port: 53
  
  # Allow egress to monitoring namespace
  - to:
    - namespaceSelector:
        matchLabels:
          name: monitoring
  
  # Allow egress to kube-system for cluster services
  - to:
    - namespaceSelector:
        matchLabels:
          name: kube-system
  
  # Allow HTTPS egress for external APIs (if needed)
  - to: []
    ports:
    - protocol: TCP
      port: 443

---
apiVersion: policy/v1
kind: PodDisruptionBudget
metadata:
  name: quantum-mpc-production-pdb
  namespace: quantum-mpc-production
  labels:
    app: quantum-mpc-transformer
    component: production-inference
spec:
  minAvailable: 2
  selector:
    matchLabels:
      app: quantum-mpc-transformer
      component: production-inference