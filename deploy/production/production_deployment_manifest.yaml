---
apiVersion: v1
kind: Namespace
metadata:
  name: secure-mpc-transformer
  labels:
    app.kubernetes.io/name: secure-mpc-transformer
    app.kubernetes.io/version: "0.2.0"
    security.policy: "enhanced"
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: mpc-transformer-config
  namespace: secure-mpc-transformer
data:
  config.yaml: |
    # Secure MPC Transformer Production Configuration
    server:
      host: "0.0.0.0"
      port: 8080
      workers: 8
      max_connections: 1000
      request_timeout: 30
      
    security:
      validation_level: "strict"
      enhanced_security_enabled: true
      quantum_monitoring_enabled: true
      threat_detection_threshold: 0.7
      
    scaling:
      auto_scaling_enabled: true
      min_instances: 3
      max_instances: 50
      target_cpu_utilization: 70
      target_memory_utilization: 75
      
    optimization:
      performance_optimization_enabled: true
      optimization_target: "balanced" 
      ml_optimization_enabled: true
      
    monitoring:
      metrics_enabled: true
      alerting_enabled: true
      dashboard_enabled: true
      
    resilience:
      circuit_breaker_enabled: true
      retry_enabled: true
      health_checks_enabled: true
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: mpc-transformer-api
  namespace: secure-mpc-transformer
  labels:
    app: mpc-transformer-api
    tier: backend
    version: v0.2.0
spec:
  replicas: 3
  selector:
    matchLabels:
      app: mpc-transformer-api
  template:
    metadata:
      labels:
        app: mpc-transformer-api
        tier: backend
        version: v0.2.0
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "9090"
        prometheus.io/path: "/metrics"
    spec:
      serviceAccountName: mpc-transformer-sa
      securityContext:
        runAsNonRoot: true
        runAsUser: 1000
        fsGroup: 1000
      containers:
      - name: mpc-transformer
        image: securempc/transformer-inference:v0.2.0-quantum
        imagePullPolicy: Always
        ports:
        - containerPort: 8080
          name: api
          protocol: TCP
        - containerPort: 9090
          name: metrics
          protocol: TCP
        env:
        - name: PYTHONPATH
          value: "/app/src"
        - name: QUANTUM_PLANNING_ENABLED
          value: "true"
        - name: ENHANCED_SECURITY_ENABLED
          value: "true"
        - name: AUTO_SCALING_ENABLED
          value: "true"
        - name: PERFORMANCE_OPTIMIZATION_ENABLED
          value: "true"
        - name: LOG_LEVEL
          value: "INFO"
        - name: ENVIRONMENT
          value: "production"
        resources:
          requests:
            memory: "4Gi"
            cpu: "2000m"
          limits:
            memory: "8Gi"
            cpu: "4000m"
        livenessProbe:
          httpGet:
            path: /health/live
            port: 8080
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 3
        readinessProbe:
          httpGet:
            path: /health/ready
            port: 8080
          initialDelaySeconds: 5
          periodSeconds: 5
          timeoutSeconds: 3
          failureThreshold: 2
        volumeMounts:
        - name: config-volume
          mountPath: /app/config
          readOnly: true
        - name: cache-volume
          mountPath: /app/cache
        securityContext:
          allowPrivilegeEscalation: false
          readOnlyRootFilesystem: true
          runAsNonRoot: true
          capabilities:
            drop:
              - ALL
      volumes:
      - name: config-volume
        configMap:
          name: mpc-transformer-config
      - name: cache-volume
        emptyDir:
          sizeLimit: 2Gi
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - weight: 100
            podAffinityTerm:
              labelSelector:
                matchExpressions:
                - key: app
                  operator: In
                  values:
                  - mpc-transformer-api
              topologyKey: kubernetes.io/hostname
      tolerations:
      - key: "high-compute"
        operator: "Equal"
        value: "true"
        effect: "NoSchedule"
---
apiVersion: v1
kind: Service
metadata:
  name: mpc-transformer-service
  namespace: secure-mpc-transformer
  labels:
    app: mpc-transformer-api
spec:
  type: ClusterIP
  ports:
  - port: 8080
    targetPort: 8080
    protocol: TCP
    name: api
  - port: 9090
    targetPort: 9090
    protocol: TCP
    name: metrics
  selector:
    app: mpc-transformer-api
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: mpc-transformer-ingress
  namespace: secure-mpc-transformer
  annotations:
    kubernetes.io/ingress.class: "nginx"
    nginx.ingress.kubernetes.io/ssl-redirect: "true"
    nginx.ingress.kubernetes.io/force-ssl-redirect: "true"
    nginx.ingress.kubernetes.io/backend-protocol: "HTTP"
    nginx.ingress.kubernetes.io/rate-limit: "100"
    nginx.ingress.kubernetes.io/rate-limit-window: "1m"
    nginx.ingress.kubernetes.io/proxy-body-size: "50m"
    cert-manager.io/cluster-issuer: "letsencrypt-prod"
spec:
  tls:
  - hosts:
    - api.secure-mpc-transformer.com
    secretName: mpc-transformer-tls
  rules:
  - host: api.secure-mpc-transformer.com
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: mpc-transformer-service
            port:
              number: 8080
---
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: mpc-transformer-hpa
  namespace: secure-mpc-transformer
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: mpc-transformer-api
  minReplicas: 3
  maxReplicas: 50
  metrics:
  - type: Resource
    resource:
      name: cpu
      target:
        type: Utilization
        averageUtilization: 70
  - type: Resource
    resource:
      name: memory
      target:
        type: Utilization
        averageUtilization: 75
  behavior:
    scaleUp:
      stabilizationWindowSeconds: 60
      policies:
      - type: Percent
        value: 50
        periodSeconds: 60
    scaleDown:
      stabilizationWindowSeconds: 300
      policies:
      - type: Percent
        value: 10
        periodSeconds: 60
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: mpc-transformer-sa
  namespace: secure-mpc-transformer
  labels:
    app: mpc-transformer-api
---
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  namespace: secure-mpc-transformer
  name: mpc-transformer-role
rules:
- apiGroups: [""]
  resources: ["configmaps", "secrets"]
  verbs: ["get", "list", "watch"]
- apiGroups: [""]
  resources: ["pods"]
  verbs: ["get", "list", "watch"]
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: mpc-transformer-rolebinding
  namespace: secure-mpc-transformer
subjects:
- kind: ServiceAccount
  name: mpc-transformer-sa
  namespace: secure-mpc-transformer
roleRef:
  kind: Role
  name: mpc-transformer-role
  apiGroup: rbac.authorization.k8s.io
---
apiVersion: policy/v1
kind: PodDisruptionBudget
metadata:
  name: mpc-transformer-pdb
  namespace: secure-mpc-transformer
spec:
  minAvailable: 2
  selector:
    matchLabels:
      app: mpc-transformer-api
---
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: mpc-transformer-network-policy
  namespace: secure-mpc-transformer
spec:
  podSelector:
    matchLabels:
      app: mpc-transformer-api
  policyTypes:
  - Ingress
  - Egress
  ingress:
  - from:
    - namespaceSelector:
        matchLabels:
          name: ingress-nginx
    ports:
    - protocol: TCP
      port: 8080
  - from: []
    ports:
    - protocol: TCP
      port: 9090  # Metrics
  egress:
  - to: []
    ports:
    - protocol: TCP
      port: 53   # DNS
    - protocol: UDP
      port: 53   # DNS
  - to: []
    ports:
    - protocol: TCP
      port: 443  # HTTPS outbound
---
apiVersion: v1
kind: Secret
metadata:
  name: mpc-transformer-secrets
  namespace: secure-mpc-transformer
type: Opaque
data:
  # Base64 encoded secrets (replace with actual values)
  database-password: cGxhY2Vob2xkZXI=
  api-key: cGxhY2Vob2xkZXI=
  encryption-key: cGxhY2Vob2xkZXI=
---