# Docker Compose for Production Security Stack
# Secure MPC Transformer with Comprehensive Security Orchestration

version: '3.8'

services:
  # Main Security Orchestrator
  security-orchestrator:
    build:
      context: ../../
      dockerfile: docker/Dockerfile.security
      args:
        - ENABLE_GPU=true
        - ENABLE_QUANTUM=true
    image: secure-mpc-transformer:security-latest
    container_name: security-orchestrator
    restart: unless-stopped
    ports:
      - "8080:8080"  # Main API
      - "9090:9090"  # Metrics
    environment:
      - LOG_LEVEL=INFO
      - SECURITY_CONFIG_PATH=/app/config/security-config.yaml
      - ENABLE_SECURITY_ORCHESTRATOR=true
      - ENABLE_QUANTUM_MONITORING=true
      - ENABLE_INCIDENT_RESPONSE=true
      - PROMETHEUS_MULTIPROC_DIR=/tmp/prometheus
      - MASTER_KEY=${MASTER_KEY}
      - JWT_SECRET=${JWT_SECRET}
      - ENCRYPTION_KEY=${ENCRYPTION_KEY}
    volumes:
      - ./config:/app/config:ro
      - security-logs:/app/logs
      - prometheus-multiproc:/tmp/prometheus
      - /etc/localtime:/etc/localtime:ro
    networks:
      - security-network
    depends_on:
      - security-cache
      - security-db
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    security_opt:
      - no-new-privileges:true
    read_only: true
    tmpfs:
      - /tmp
      - /var/tmp
    deploy:
      resources:
        limits:
          cpus: '2.0'
          memory: 4G
        reservations:
          cpus: '1.0'
          memory: 2G

  # Security Dashboard
  security-dashboard:
    build:
      context: ../../
      dockerfile: docker/Dockerfile.dashboard
    image: secure-mpc-transformer:dashboard-latest
    container_name: security-dashboard
    restart: unless-stopped
    ports:
      - "8081:8081"  # Dashboard UI
      - "9091:9091"  # Dashboard metrics
    environment:
      - LOG_LEVEL=INFO
      - DASHBOARD_CONFIG_PATH=/app/config/security-config.yaml
      - ORCHESTRATOR_URL=http://security-orchestrator:8080
    volumes:
      - ./config:/app/config:ro
      - dashboard-data:/app/data
      - /etc/localtime:/etc/localtime:ro
    networks:
      - security-network
    depends_on:
      - security-orchestrator
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8081/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    security_opt:
      - no-new-privileges:true
    read_only: true
    tmpfs:
      - /tmp
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 2G
        reservations:
          cpus: '0.5'
          memory: 1G

  # Redis Cache for Security Data
  security-cache:
    image: redis:7-alpine
    container_name: security-cache
    restart: unless-stopped
    ports:
      - "6379:6379"
    command: [
      "redis-server",
      "--appendonly", "yes",
      "--appendfsync", "everysec",
      "--maxmemory", "1gb",
      "--maxmemory-policy", "allkeys-lru",
      "--requirepass", "${REDIS_PASSWORD}",
      "--bind", "0.0.0.0",
      "--protected-mode", "yes"
    ]
    volumes:
      - security-cache-data:/data
      - /etc/localtime:/etc/localtime:ro
    networks:
      - security-network
    healthcheck:
      test: ["CMD", "redis-cli", "--no-auth-warning", "-a", "${REDIS_PASSWORD}", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
    security_opt:
      - no-new-privileges:true
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 1G
        reservations:
          cpus: '0.25'
          memory: 512M

  # PostgreSQL Database for Security Events
  security-db:
    image: postgres:15-alpine
    container_name: security-db
    restart: unless-stopped
    ports:
      - "5432:5432"
    environment:
      - POSTGRES_DB=security_events
      - POSTGRES_USER=security_user
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_INITDB_ARGS=--auth-host=scram-sha-256
    volumes:
      - security-db-data:/var/lib/postgresql/data
      - ./scripts/init-security-db.sql:/docker-entrypoint-initdb.d/init-security-db.sql:ro
      - /etc/localtime:/etc/localtime:ro
    networks:
      - security-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U security_user -d security_events"]
      interval: 30s
      timeout: 10s
      retries: 3
    security_opt:
      - no-new-privileges:true
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 2G
        reservations:
          cpus: '0.5'
          memory: 1G

  # Prometheus for Metrics Collection
  prometheus:
    image: prom/prometheus:latest
    container_name: security-prometheus
    restart: unless-stopped
    ports:
      - "9092:9090"
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--storage.tsdb.retention.time=30d'
      - '--storage.tsdb.retention.size=10GB'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--web.enable-lifecycle'
      - '--web.enable-admin-api'
    volumes:
      - ./config/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - ./config/security-alerts.yml:/etc/prometheus/rules/security-alerts.yml:ro
      - prometheus-data:/prometheus
      - /etc/localtime:/etc/localtime:ro
    networks:
      - security-network
    depends_on:
      - security-orchestrator
      - security-dashboard
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:9090/-/healthy"]
      interval: 30s
      timeout: 10s
      retries: 3
    security_opt:
      - no-new-privileges:true
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 2G
        reservations:
          cpus: '0.5'
          memory: 1G

  # Grafana for Visualization
  grafana:
    image: grafana/grafana:latest
    container_name: security-grafana
    restart: unless-stopped
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD}
      - GF_SECURITY_DISABLE_GRAVATAR=true
      - GF_SECURITY_COOKIE_SECURE=true
      - GF_SECURITY_COOKIE_SAMESITE=strict
      - GF_SECURITY_STRICT_TRANSPORT_SECURITY=true
      - GF_SECURITY_CONTENT_TYPE_PROTECTION=true
      - GF_SECURITY_X_FRAME_OPTIONS=deny
      - GF_SECURITY_X_XSS_PROTECTION=true
      - GF_SERVER_PROTOCOL=http
      - GF_SERVER_DOMAIN=localhost
      - GF_INSTALL_PLUGINS=grafana-piechart-panel
    volumes:
      - grafana-data:/var/lib/grafana
      - ./config/grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./config/grafana/datasources:/etc/grafana/provisioning/datasources:ro
      - /etc/localtime:/etc/localtime:ro
    networks:
      - security-network
    depends_on:
      - prometheus
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    security_opt:
      - no-new-privileges:true
    user: "472:472"
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 1G
        reservations:
          cpus: '0.25'
          memory: 512M

  # Alert Manager
  alertmanager:
    image: prom/alertmanager:latest
    container_name: security-alertmanager
    restart: unless-stopped
    ports:
      - "9093:9093"
    command:
      - '--config.file=/etc/alertmanager/alertmanager.yml'
      - '--storage.path=/alertmanager'
      - '--web.external-url=http://localhost:9093'
    volumes:
      - ./config/alertmanager.yml:/etc/alertmanager/alertmanager.yml:ro
      - alertmanager-data:/alertmanager
      - /etc/localtime:/etc/localtime:ro
    networks:
      - security-network
    depends_on:
      - prometheus
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:9093/-/healthy"]
      interval: 30s
      timeout: 10s
      retries: 3
    security_opt:
      - no-new-privileges:true
    deploy:
      resources:
        limits:
          cpus: '0.25'
          memory: 512M
        reservations:
          cpus: '0.1'
          memory: 256M

  # Log Aggregation with Fluentd
  fluentd:
    build:
      context: ../../
      dockerfile: docker/Dockerfile.fluentd
    image: secure-mpc-transformer:fluentd-latest
    container_name: security-fluentd
    restart: unless-stopped
    ports:
      - "24224:24224"
      - "24224:24224/udp"
    environment:
      - FLUENTD_CONF=fluent.conf
    volumes:
      - ./config/fluentd:/fluentd/etc:ro
      - security-logs:/fluentd/log
      - /etc/localtime:/etc/localtime:ro
    networks:
      - security-network
    security_opt:
      - no-new-privileges:true
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 1G
        reservations:
          cpus: '0.25'
          memory: 512M

  # NGINX Reverse Proxy with Security Headers
  nginx-proxy:
    image: nginx:alpine
    container_name: security-nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./config/nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./config/nginx/security.conf:/etc/nginx/conf.d/security.conf:ro
      - ./config/ssl:/etc/nginx/ssl:ro
      - nginx-logs:/var/log/nginx
      - /etc/localtime:/etc/localtime:ro
    networks:
      - security-network
    depends_on:
      - security-orchestrator
      - security-dashboard
      - grafana
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    security_opt:
      - no-new-privileges:true
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 512M
        reservations:
          cpus: '0.25'
          memory: 256M

  # Security Backup Service
  security-backup:
    build:
      context: ../../
      dockerfile: docker/Dockerfile.backup
    image: secure-mpc-transformer:backup-latest
    container_name: security-backup
    restart: unless-stopped
    environment:
      - BACKUP_SCHEDULE=0 2 * * *  # Daily at 2 AM
      - BACKUP_RETENTION_DAYS=30
      - POSTGRES_HOST=security-db
      - POSTGRES_DB=security_events
      - POSTGRES_USER=security_user
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - REDIS_HOST=security-cache
      - REDIS_PASSWORD=${REDIS_PASSWORD}
      - BACKUP_ENCRYPTION_KEY=${BACKUP_ENCRYPTION_KEY}
      - S3_BUCKET=${BACKUP_S3_BUCKET}
      - AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}
      - AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}
    volumes:
      - security-backups:/backups
      - security-db-data:/source/db:ro
      - security-cache-data:/source/cache:ro
      - /etc/localtime:/etc/localtime:ro
    networks:
      - security-network
    depends_on:
      - security-db
      - security-cache
    security_opt:
      - no-new-privileges:true
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 1G
        reservations:
          cpus: '0.25'
          memory: 512M

# Volumes for persistent data
volumes:
  security-cache-data:
    driver: local
    driver_opts:
      type: none
      device: /opt/security-mpc/cache
      o: bind
  security-db-data:
    driver: local
    driver_opts:
      type: none
      device: /opt/security-mpc/database
      o: bind
  prometheus-data:
    driver: local
    driver_opts:
      type: none
      device: /opt/security-mpc/prometheus
      o: bind
  grafana-data:
    driver: local
    driver_opts:
      type: none
      device: /opt/security-mpc/grafana
      o: bind
  alertmanager-data:
    driver: local
  security-logs:
    driver: local
  dashboard-data:
    driver: local
  prometheus-multiproc:
    driver: local
  nginx-logs:
    driver: local
  security-backups:
    driver: local
    driver_opts:
      type: none
      device: /opt/security-mpc/backups
      o: bind

# Networks
networks:
  security-network:
    driver: bridge
    ipam:
      driver: default
      config:
        - subnet: 172.20.0.0/24
          gateway: 172.20.0.1
    driver_opts:
      com.docker.network.bridge.name: security-br0
      com.docker.network.bridge.enable_icc: "true"
      com.docker.network.bridge.enable_ip_masquerade: "true"
      com.docker.network.bridge.host_binding_ipv4: "0.0.0.0"
      com.docker.network.driver.mtu: "1500"